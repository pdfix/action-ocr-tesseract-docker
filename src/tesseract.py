import os
import tempfile
import uuid

import pytesseract
from pdfixsdk.Pdfix import (
    GetPdfix,
    Pdfix,
    PdfMatrix,
    kPdsPageText,
    kSaveFull,
)
from tqdm import tqdm

import utils
from exceptions import PdfixException
from page_renderer import render_pages


def ocr(input_path: str, output_path: str, license_name: str, license_key: str, lang: str) -> None:
    """
    Run OCR using Tesseract.

    Args:
        input_path (str): Input path to the PDF file.
        output_path  (str): Output path for saving the PDF file.
        license_name (str): Pdfix SDK license name.
        license_key (str): dfix SDK license key.
        lang (str): Language identifier for OCR Tesseract.

    """
    # List of available languages
    print(f"Available config files: {pytesseract.get_languages(config='')}")

    pdfix = GetPdfix()
    if pdfix is None:
        raise Exception("Pdfix Initialization fail")

    # Authorize PDFix SDK
    if license_name and license_key:
        if not pdfix.GetAccountAuthorization().Authorize(license_name, license_key):
            raise Exception(pdfix.GetError())
    elif license_key:
        if not pdfix.GetStandarsAuthorization().Activate(license_key):
            raise Exception(pdfix.GetError())
    else:
        print("No license name or key provided. Using PDFix SDK trial")

    # Open doc
    doc = pdfix.OpenDoc(input_path, "")
    if doc is None:
        raise Exception("Unable to open pdf : " + str(pdfix.GetError()))

    if lang == "":
        pdf_lang = utils.translate_iso_to_tesseract(doc.GetLang())
        # default "eng" if pdf does not have lang identifier or is not supported
        lang = "eng" if pdf_lang is None else pdf_lang

    print(f"Using langauge: {lang}")

    doc_num_pages = doc.GetNumPages()

    # Process each page
    for i in tqdm(range(doc_num_pages), desc="Processing pages"):
        page = doc.AcquirePage(i)
        if page is None:
            raise PdfixException("Unable to acquire page")

        try:
            temp_pdf = render_pages(page, pdfix, lang)
        except Exception as e:
            raise e

        temp_path = tempfile.gettempdir() + str(uuid.uuid4()) + ".pdf"  # temporary file for pdf generated by the OCR
        with open(temp_path, "w+b") as f:
            f.write(temp_pdf)

        temp_doc = pdfix.OpenDoc(temp_path, "")

        if temp_doc is None:
            raise Exception("Unable to open pdf : " + str(pdfix.GetError()))

        # There is always only one page in the new PDF file
        temp_page = temp_doc.AcquirePage(0)
        temp_page_box = temp_page.GetCropBox()

        # Remove other then text page objects from the page content
        temp_page_content = temp_page.GetContent()
        for j in reversed(range(temp_page_content.GetNumObjects())):
            obj = temp_page_content.GetObject(j)
            obj_type = obj.GetObjectType()
            if obj_type != kPdsPageText:
                temp_page_content.RemoveObject(obj)

        temp_page.SetContent()

        xobj = doc.CreateXObjectFromPage(temp_page)
        if xobj is None:
            raise Exception(
                "Failed to create XObject from page: " + str(pdfix.GetError()),
            )

        temp_page.Release()
        temp_doc.Close()

        os.remove(temp_path)

        crop_box = page.GetCropBox()
        rotate = page.GetRotate()

        width = crop_box.right - crop_box.left
        width_tmp = temp_page_box.right - temp_page_box.left
        height = crop_box.top - crop_box.bottom
        height_tmp = temp_page_box.top - temp_page_box.bottom

        if rotate == 90 or rotate == 270:
            width_tmp, height_tmp = height_tmp, width_tmp

        scale_x = width / width_tmp
        scale_y = height / height_tmp

        # Calculate matrix for placing xObject on a page
        rotate = (page.GetRotate() / 90) % 4
        matrix = PdfMatrix()
        matrix = utils.pdf_matrix_rotate(matrix, rotate * utils.pi / 2, False)
        matrix = utils.pdf_matrix_scale(matrix, scale_x, scale_y, False)
        if rotate == 0:
            matrix = utils.pdf_matrix_translate(
                matrix,
                crop_box.left,
                crop_box.bottom,
                False,
            )
        elif rotate == 1:
            matrix = utils.pdf_matrix_translate(
                matrix,
                crop_box.right,
                crop_box.bottom,
                False,
            )
        elif rotate == 2:
            matrix = utils.pdf_matrix_translate(
                matrix,
                crop_box.right,
                crop_box.top,
                False,
            )
        elif rotate == 3:
            matrix = utils.pdf_matrix_translate(
                matrix,
                crop_box.left,
                crop_box.top,
                False,
            )

        content = page.GetContent()
        form = content.AddNewForm(-1, xobj, matrix)
        if form is None:
            raise Exception("Failed to add xobject to page: " + str(Pdfix.GetError()))

    if not doc.Save(output_path, kSaveFull):
        raise Exception("Unable to save pdf : " + str(pdfix.GetError()))

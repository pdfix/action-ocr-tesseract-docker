import os
import tempfile
import uuid
from typing import BinaryIO, cast

import pytesseract
from pdfixsdk.Pdfix import (
    GetPdfix,
    PdfMatrix,
    PdfPage,
    kPdsPageText,
    kSaveFull,
)
from tqdm import tqdm

from exceptions import PdfixException
from page_renderer import render_page
from utils_sdk import (
    authorize_sdk,
    pdf_matrix_rotate,
    pdf_matrix_scale,
    pdf_matrix_translate,
    pi,
    translate_iso_to_tesseract,
)


def ocr(input_path: str, output_path: str, license_name: str, license_key: str, lang: str, zoom: float) -> None:
    """
    Run OCR using Tesseract.

    Args:
        input_path (str): Input path to the PDF file.
        output_path  (str): Output path for saving the PDF file.
        license_name (str): Pdfix SDK license name.
        license_key (str): dfix SDK license key.
        lang (str): Language identifier for OCR Tesseract.
        zoom (float): Zoom level for rendering the page.
    """
    # List of available languages
    print(f"Available config files: {pytesseract.get_languages(config='')}")

    pdfix = GetPdfix()
    if pdfix is None:
        raise Exception("Pdfix Initialization fail")

    authorize_sdk(pdfix, license_name, license_key)

    # Open doc
    doc = pdfix.OpenDoc(input_path, "")
    if doc is None:
        raise PdfixException(pdfix, "Unable to open pdf")

    if lang == "":
        pdf_lang = translate_iso_to_tesseract(doc.GetLang())
        # default "eng" if pdf does not have lang identifier or is not supported
        lang = "eng" if pdf_lang is None else pdf_lang

    print(f"Using langauge: {lang}")

    doc_num_pages = doc.GetNumPages()

    # Process each page
    for i in tqdm(range(doc_num_pages), desc="Processing pages"):
        page: PdfPage = doc.AcquirePage(i)
        if page is None:
            raise PdfixException(pdfix, "Unable to acquire page")

        try:
            # Create temp file for rendering
            with tempfile.NamedTemporaryFile() as tmp:
                render_page(pdfix, page, zoom, cast(BinaryIO, tmp.file))
                # Run OCR
                temp_pdf_page = pytesseract.image_to_pdf_or_hocr(
                    tmp.name + ".jpg",
                    extension="pdf",
                    lang=lang,
                )

            temp_path = f"{tempfile.gettempdir()}{str(uuid.uuid4())}.pdf"  # temporary file for pdf generated by the OCR
            with open(temp_path, "w+b") as f:
                f.write(temp_pdf_page)

            try:
                temp_doc = pdfix.OpenDoc(temp_path, "")
                if temp_doc is None:
                    raise PdfixException(pdfix, "Unable to open pdf")

                try:
                    # There is always only one page in the new PDF file
                    temp_page: PdfPage = temp_doc.AcquirePage(0)

                    try:
                        temp_page_box = temp_page.GetCropBox()

                        # Remove other then text page objects from the page content
                        temp_page_content = temp_page.GetContent()
                        for j in reversed(range(temp_page_content.GetNumObjects())):
                            obj = temp_page_content.GetObject(j)
                            obj_type = obj.GetObjectType()
                            if obj_type != kPdsPageText:
                                temp_page_content.RemoveObject(obj)

                        temp_page.SetContent()

                        xobj = doc.CreateXObjectFromPage(temp_page)
                        if xobj is None:
                            raise PdfixException("Failed to create XObject from page")

                    except Exception:
                        raise
                    finally:
                        temp_page.Release()
                except Exception:
                    raise
                finally:
                    temp_doc.Close()
            except Exception:
                raise
            finally:
                os.remove(temp_path)

            crop_box = page.GetCropBox()
            rotate = page.GetRotate()

            width = crop_box.right - crop_box.left
            width_tmp = temp_page_box.right - temp_page_box.left
            height = crop_box.top - crop_box.bottom
            height_tmp = temp_page_box.top - temp_page_box.bottom

            if rotate == 90 or rotate == 270:
                width_tmp, height_tmp = height_tmp, width_tmp

            scale_x = width / width_tmp
            scale_y = height / height_tmp

            # Calculate matrix for placing xObject on a page
            rotate = (page.GetRotate() / 90) % 4
            matrix = PdfMatrix()
            matrix = pdf_matrix_rotate(matrix, rotate * pi / 2, False)
            matrix = pdf_matrix_scale(matrix, scale_x, scale_y, False)
            if rotate == 0:
                matrix = pdf_matrix_translate(
                    matrix,
                    crop_box.left,
                    crop_box.bottom,
                    False,
                )
            elif rotate == 1:
                matrix = pdf_matrix_translate(
                    matrix,
                    crop_box.right,
                    crop_box.bottom,
                    False,
                )
            elif rotate == 2:
                matrix = pdf_matrix_translate(
                    matrix,
                    crop_box.right,
                    crop_box.top,
                    False,
                )
            elif rotate == 3:
                matrix = pdf_matrix_translate(
                    matrix,
                    crop_box.left,
                    crop_box.top,
                    False,
                )

            content = page.GetContent()
            form = content.AddNewForm(-1, xobj, matrix)
            if form is None:
                raise PdfixException(pdfix, "Failed to add xobject to page")
        except Exception:
            raise
        finally:
            page.Release()

    if not doc.Save(output_path, kSaveFull):
        raise PdfixException(pdfix, "Unable to save pdf")
